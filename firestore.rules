rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    /* ---------- helpers ---------- */

    function signedIn() {
      return request.auth != null;
    }

    function ownerRolePreserved(fid) {
      let fam = get(/databases/$(db)/documents/families/$(fid));
      let owner = fam.data.ownerUid;

      // members alanı hiç gönderilmiyorsa true,
      // gönderildiyse owner’ın rolü mutlaka 'owner' kalmalı
      return !(request.resource.data.members is map)
             || request.resource.data.members[owner] == 'owner';
    }

    function familyExists(fid) {
      return exists(/databases/$(db)/documents/families/$(fid));
    }

    // roles: members map'inde saklanıyor
    function roleOf(fid, uid) {
      return get(/databases/$(db)/documents/families/$(fid)).data.members[uid];
    }
    function hasRole(fid, allowed) {
      return signedIn()
             && familyExists(fid)
             && (roleOf(fid, request.auth.uid) in allowed);
    }
    function isOwner(fid)  { return hasRole(fid, ['owner']); }
    function isEditor(fid) { return hasRole(fid, ['owner','editor']); }
    function isMember(fid) { return hasRole(fid, ['owner','editor','member']); }
    function isViewer(fid) { return hasRole(fid, ['owner','editor','member','viewer']); }

    // tiny helpers
    function isString(x) { return x is string; }
    function isBool(x)   { return x is bool; }
    function isNum(x)    { return x is number; }
    function between(n, a, b) { return n >= a && n <= b; }

    // canonical day check
    function isCanonicalDay(d) {
      return d in ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'];
    }

    /* ---------- root-level collections ---------- */

    match /users/{uid} {
      allow read, create, update: if signedIn() && request.auth.uid == uid;
      allow delete: if false;
    }

    match /family_names/{nameLower} {
      allow get: if signedIn();
      allow list: if false;

      allow create: if signedIn()
        && !exists(/databases/$(db)/documents/family_names/$(nameLower))
        && request.resource.data.ownerUid == request.auth.uid;

      allow delete: if signedIn()
        && resource.data.ownerUid == request.auth.uid;

      allow update: if false;
    }

    match /invites/{code} {
      allow get: if signedIn();
      allow list: if false;

      allow create: if signedIn()
        && request.resource.data.ownerUid == request.auth.uid;

      allow update, delete: if signedIn()
        && request.auth.uid == resource.data.ownerUid;
    }

    /* ---------- families tree ---------- */

    match /families/{fid} {

      // Oku: herkes (rollerden herhangi biri)
      allow get: if isViewer(fid);
      allow list: if false;

      // Create: sadece kendini owner yazarak
      allow create: if signedIn()
        && request.resource.data.ownerUid == request.auth.uid
        && (request.resource.data.members is map)
        && (request.resource.data.members[request.auth.uid] == 'owner')
        && (request.resource.data.nameLower is string)
        && exists(/databases/$(db)/documents/family_names/$(request.resource.data.nameLower))
        && get(/databases/$(db)/documents/family_names/$(request.resource.data.nameLower)).data.ownerUid == request.auth.uid;

      // Update
      allow update: if
        // 1) Owner serbest
        isOwner(fid)
        ||
        // 2) JOIN: üye değilken sadece kendini ekleyebilirsin (editor/viewer) ve sadece members + updatedAt
        (
          signedIn()
          && familyExists(fid)
          && !(request.auth.uid in (resource.data.members is map ? resource.data.members.keys() : []))
          && (request.resource.data.members is map)
          && (request.resource.data.members[request.auth.uid] in ['editor','viewer'])
          && request.resource.data.diff(resource.data).changedKeys().hasOnly(['members','updatedAt'])
        )
        ||
        // 3) Üye: güvenli alanları (members HARİÇ) değiştirebilir
        (
          isMember(fid)
          && request.resource.data.diff(resource.data).changedKeys()
                .hasOnly(['name','nameLower','memberNames','inviteCode','updatedAt','createdAt'])
        )&& ownerRolePreserved(fid);

      // Delete: sadece owner
      allow delete: if isOwner(fid);



      // WEEKLY
      function validWeeklyCreate(d) {
        return d.keys().hasOnly(['day','title','assignedToUid','hour','minute','notifEnabled','createdAt','updatedAt'])
          && isString(d.day) && isCanonicalDay(d.day)
          && isString(d.title)
          && (!('assignedToUid' in d) || isString(d.assignedToUid))
          && (!('hour' in d) || d.hour == null || isNum(d.hour))
          && (!('minute' in d) || d.minute == null || isNum(d.minute))
          && ( (!('hour' in d) && !('minute' in d))
               || (('hour' in d) && ('minute' in d)
                   && (d.hour == null && d.minute == null
                       || (between(d.hour,0,23) && between(d.minute,0,59)))) )
          && (!('notifEnabled' in d) || isBool(d.notifEnabled));
      }
      function validWeeklyUpdate(d) {
        return d.keys().hasOnly(['day','title','assignedToUid','hour','minute','notifEnabled','createdAt','updatedAt'])
          && (!('day' in d) || (isString(d.day) && isCanonicalDay(d.day)))
          && (!('title' in d) || isString(d.title))
          && (!('assignedToUid' in d) || isString(d.assignedToUid))
          && (!('hour' in d) || d.hour == null || isNum(d.hour))
          && (!('minute' in d) || d.minute == null || isNum(d.minute))
          && ( (!('hour' in d) && !('minute' in d))
               || (('hour' in d) && ('minute' in d)
                   && (d.hour == null && d.minute == null
                       || (between(d.hour,0,23) && between(d.minute,0,59)))) )
          && (!('notifEnabled' in d) || isBool(d.notifEnabled));
      }

      match /expenses/{eid} {
              // herkes (viewer+) okuyabilsin
          allow read: if isViewer(fid);

              // yazma: editor veya member yazabilsin (istersen sadece editor yap)
          allow create, update, delete: if isEditor(fid) || isMember(fid);
      }

      // TASKS
      function validTaskCreate(d) {
        return d.keys().hasOnly(['name','completed','assignedToUid','origin','createdAt','updatedAt','dueAt','reminderAt'])
          && isString(d.name)
          && (!('completed' in d) || isBool(d.completed))
          && (!('assignedToUid' in d) || isString(d.assignedToUid))
          && (!('origin' in d) || isString(d.origin));
      }
      function validTaskUpdate(d) {
        return d.keys().hasOnly(['name','completed','assignedToUid','origin','createdAt','updatedAt','dueAt','reminderAt'])
          && (!('name' in d) || isString(d.name))
          && (!('completed' in d) || isBool(d.completed))
          && (!('assignedToUid' in d) || isString(d.assignedToUid))
          && (!('origin' in d) || isString(d.origin));
      }

      // ITEMS
      function validItemCreate(d) {
        return d.keys().hasOnly(['name','bought','assignedToUid','category','price','createdAt','updatedAt'])
          && isString(d.name)
          && (!('bought' in d) || isBool(d.bought))
          && (!('assignedToUid' in d) || isString(d.assignedToUid))
          && (!('category' in d) || isString(d.category))
          && (!('price' in d) || isNum(d.price));
      }
      function validItemUpdate(d) {
        return d.keys().hasOnly(['name','bought','assignedToUid','category','price','createdAt','updatedAt'])
          && (!('name' in d) || isString(d.name))
          && (!('bought' in d) || isBool(d.bought))
          && (!('assignedToUid' in d) || isString(d.assignedToUid))
          && (!('category' in d) || isString(d.category))
          && (!('price' in d) || isNum(d.price));
      }

      /* ---- subcollections (GÖRELİ yollar!) ---- */

      match /weekly/{docId} {
        allow read: if isViewer(fid);
        allow create: if isEditor(fid) && validWeeklyCreate(request.resource.data);
        allow update: if isEditor(fid) && validWeeklyUpdate(request.resource.data);
        allow delete: if isEditor(fid);
      }

      match /tasks/{tid} {
        allow read: if isViewer(fid);
        allow create: if (isEditor(fid) || isMember(fid)) && validTaskCreate(request.resource.data);
        allow update: if
            isEditor(fid)
            ||
            (
              isMember(fid)
              && resource.data.assignedToUid == request.auth.uid
              && request.resource.data.diff(resource.data).changedKeys()
                    .hasOnly(['completed','reminderAt','dueAt','updatedAt'])
              && validTaskUpdate(request.resource.data)
            );
        allow delete: if isEditor(fid)
            || (isMember(fid) && resource.data.assignedToUid == request.auth.uid);
      }

      match /items/{iid} {
        allow read: if isViewer(fid);
        allow create: if (isEditor(fid) || isMember(fid)) && validItemCreate(request.resource.data);
        allow update: if
            isEditor(fid)
            ||
            (
              isMember(fid)
              && resource.data.assignedToUid == request.auth.uid
              && request.resource.data.diff(resource.data).changedKeys()
                    .hasOnly(['bought','updatedAt'])
              && validItemUpdate(request.resource.data)
            );
        allow delete: if isEditor(fid);
      }

      // ✅ SCORES (member kendi skorunu yazabilir; editor herkesinkini)
      // families/{fid}/scores/{period}/{periodId}/{uid}
      match /scores/{period}/{periodId}/{uid} {
        function isAllowedPeriod() { return period in ['day','week','month']; }

        allow read: if isViewer(fid) && isAllowedPeriod();

        // İlk oluşturma: points bir sayı olmalı (transform değil)
        allow create: if
            isAllowedPeriod()
            && (request.resource.data.points is number)
            && (
                 isEditor(fid)                         // owner/editor herhangi bir UID için
                 || (isMember(fid) && request.auth.uid == uid) // member sadece kendi UID’si
               );

        allow update: if
            isAllowedPeriod()
            && (
                 isEditor(fid)
                 || (isMember(fid) && request.auth.uid == uid)
               );

        allow delete: if false;
      }
    }
  }
}